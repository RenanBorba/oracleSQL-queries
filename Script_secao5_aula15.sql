-- AULA 16

SELECT * FROM TALUNO;

SELECT * FROM TCONTRATO;

UPDATE TALUNO SET
  NOME = 'RAFAEL'
WHERE COD_ALUNO = 5

UPDATE TALUNO SET
  CEP = '13000000'
WHERE COD_ALUNO = 6 OR COD_ALUNO = 7

UPDATE TCONTRATO SET
  DESCONTO = '7'
WHERE COD_CONTRATO = 2 OR COD_CONTRATO = 4


-- PRODUTO CARTESIANO -> ERRADO!
SELECT TALUNO.COD_ALUNO, TALUNO.NOME, TCONTRATO.TOTAL
FROM TALUNO, TCONTRATO

-- CORRETO!
SELECT TALUNO.COD_ALUNO, TALUNO.NOME, TCONTRATO.TOTAL
FROM TALUNO, TCONTRATO
WHERE TALUNO.COD_ALUNO = TCONTRATO.COD_ALUNO

-- ERRADO - COLUNA AMBÍGUA!
--  COD_ALUNO É APRESENTADO NAS TABELAS TALUNO E TCONTRATO
SELECT COD_ALUNO, TALUNO.NOME, TCONTRATO.TOTAL
FROM TALUNO, TCONTRATO
-- CORRETO: QUANDO A COLUNA EXISTE COM MESMO NOME EM MAIS DE UMA TABELA
--  COLOCAR PREFIXO NA COLUNA (EX.: TALUNO.COD_ALUNO)
WHERE TALUNO.COD_ALUNO = TCONTRATO.COD_ALUNO


-- AULA 17

-- UNIÃO DA TABELA DE ALUNO COM CONTRATO
--  REALIZAR JOIN UTILIZANDO ALIAS 'APELIDO' PARA TABELAS
--   ALU = APELIDO
SELECT ALU.COD_ALUNO, ALU.NOME AS ALUNO,
       CON.COD_CONTRATO, CON.DATA, CON.TOTAL
FROM TALUNO ALU, TCONTRATO CON
WHERE CON.COD_ALUNO = ALU.COD_ALUNO -- CRITÉRIO UNIÃO
AND Upper(ALU.NOME) LIKE '%' -- FILTRO
ORDER BY ALU.NOME -- ORDENAR POR NOME

SELECT ALU.COD_ALUNO, ALU.NOME AS ALUNO,
       CON.COD_CONTRATO, CON.DATA, CON.TOTAL
FROM TALUNO ALU, TCONTRATO CON
WHERE CON.COD_ALUNO = ALU.COD_ALUNO
AND Upper(ALU.NOME) LIKE 'REN%'
ORDER BY ALU.NOME


SELECT * FROM TALUNO;
SELECT * FROM TCONTRATO;
SELECT * FROM TITEM;
SELECT * FROM TCURSO;


SELECT ALU.COD_ALUNO, ALU.NOME AS ALUNO,
       CON.COD_CONTRATO, CON.DATA, CON.TOTAL,
       ITE.COD_CURSO, CUR.NOME AS CURSO,
       ITE.VALOR

FROM TALUNO ALU, TCONTRATO CON,
     TITEM ITE, TCURSO CUR

WHERE ALU.COD_ALUNO = CON.COD_ALUNO
AND CON.COD_CONTRATO = ITE.COD_CONTRATO
AND ITE.COD_CURSO = CUR.COD_CURSO

ORDER BY CON.TOTAL DESC;


INSERT INTO TALUNO
VALUES (10, 'MANOEL', 'NOVO HAMBURGO', '10000000', 'SC', '950', NULL)

SELECT ALU.COD_ALUNO, ALU.NOME AS ALUNO,
       CON.COD_CONTRATO, CON.DATA, CON.TOTAL,
       ITE.COD_CURSO, CUR.NOME AS CURSO,
       ITE.VALOR

FROM TALUNO ALU, TCONTRATO CON,
     TITEM ITE, TCURSO CUR

-- (+) = OUTER JOIN: RETORNA TODOS OS REGISTROS DE AMBAS AS TABELAS
WHERE ALU.COD_ALUNO = CON.COD_ALUNO(+)
AND CON.COD_CONTRATO = ITE.COD_CONTRATO(+)
AND ITE.COD_CURSO = CUR.COD_CURSO(+)

ORDER BY CON.TOTAL DESC;


CREATE TABLE TDESCONTO
(
  CLASSE VARCHAR(1) PRIMARY KEY,
  INFERIOR NUMBER(4,2),
  SUPERIOR NUMBER(4,2)
);

INSERT INTO TDESCONTO VALUES ('A', 00, 10);
INSERT INTO TDESCONTO VALUES ('B', 11, 15);
INSERT INTO TDESCONTO VALUES ('C', 16, 20);
INSERT INTO TDESCONTO VALUES ('D', 21, 25);
INSERT INTO TDESCONTO VALUES ('E', 26, 30);

SELECT * FROM TDESCONTO;

COMMIT;


SELECT * FROM TCONTRATO

UPDATE TCONTRATO SET
  DESCONTO = 27
WHERE COD_CONTRATO = 6;

UPDATE TCONTRATO SET
  DESCONTO = 18
WHERE COD_CONTRATO = 5;


SELECT CON.COD_CONTRATO AS CONTRATO,
       CON.DESCONTO AS DESCONTO,
       DES.CLASSE AS CLASSE_DESCONTO

FROM TCONTRATO CON, TDESCONTO DES
WHERE Nvl(CON.DESCONTO, 0) -- CRITÉRIO UNIÃO
BETWEEN DES.INFERIOR AND DES.SUPERIOR -- ENTRE DESCONTO INFERIOR E SUPERIOR

ORDER BY CON.COD_CONTRATO;

COMMIT;

SELECT * FROM TCURSO

INSERT INTO TCURSO VALUES (6, 'PHP', 1000, 100, NULL);
INSERT INTO TCURSO VALUES (7, 'REACT NATIVE', 100, 20, NULL);
INSERT INTO TCURSO VALUES (8, 'LOGICAE', 100, 20, NULL);

UPDATE TCURSO SET
  NOME = 'LOGICA'
WHERE COD_CURSO = 8

UPDATE TCURSO SET
  NOME = 'JAVASERVER FACES'
WHERE COD_CURSO = 4



-- MOSTRAR CURSOS VENDIDOS
SELECT CUR.COD_CURSO, CUR.NOME, ITE.VALOR
FROM TCURSO CUR, TITEM ITE
WHERE CUR.COD_CURSO = ITE.COD_CURSO

-- MOSTRAR CURSOS NÃO VENDIDOS
SELECT CUR.COD_CURSO, CUR.NOME, ITE.COD_ITEM
FROM TCURSO CUR, TITEM ITE
WHERE CUR.COD_CURSO = ITE.COD_CURSO(+)
AND ITE.COD_ITEM IS NULL;


SELECT * FROM TCURSO

ALTER TABLE TCURSO ADD PRE_REQ INTEGER;

UPDATE TCURSO SET PRE_REQ = 8
WHERE COD_CURSO = 1;

UPDATE TCURSO SET PRE_REQ = 8
WHERE COD_CURSO = 3;

UPDATE TCURSO SET PRE_REQ = 8
WHERE COD_CURSO = 6;

UPDATE TCURSO SET PRE_REQ = 8
WHERE COD_CURSO = 7;


-- CURSO E PRÉ REQUISITO
-- SELECT DE DUAS TABELAS (MESMA TABELA)
SELECT CURSO.NOME AS CURSO,
       PRE_REQUI.NOME AS PRE_REQUISITO
FROM TCURSO CURSO, TCURSO PRE_REQUI
WHERE CURSO.PRE_REQ = PRE_REQUI.COD_CURSO(+); -- PARA EXIBIR OS CURSOS SEM REQ.



























































