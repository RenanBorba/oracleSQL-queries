SELECT [DISTINCT] {*, COLUMN [ALIAS], ...}
FROM NOME_TABLE;

/*
  NA SINTAXE:
  SELECT = É UMA LISTA DE UMA OU MAIS COLUNAS
  DISTINCT = SUPRIME DUPLICIDADES
  * = SELECIONA TODAS AS COLUNAS
  COLUMN = SELECIONA A COLUNA NOMEADA
  ALIAS = FORNECE TÍTULOS DIFERENTES PARA AS COLUNAS SELECIONADAS
  FROM NOME_TABLE = ESPECIFICA A TABELA QUE CONTÉM AS COLUNAS
*/


-- OPERAÇÕES COM COLUNAS COM VALORES NULL,
--  ANULAM A OPERAÇÃO INTEIRA


-- ALIAS
-- COM OU SEM AS
SELECT COD_ALUNO CODIGO, NOME AS ALUNO
FROM TALUNO;

-- COM ESPAÇO NO NOME
SELECT NOME "NOME DE ALUNO"
FROM TALUNO;


-- CONCATENAÇÃO
-- JUNTA AS COLUNAS E NOMEIA A MESMA
SELECT COD_ALUNO||NOME AS "ALUNO"
FROM TALUNO;

SELECT * FROM TALUNO


-- STRINGS DE CARACTERE LITERAIS: QUALQUER CARACTERE,
--  EXPRESSÃO OU NÚMERO EM ASPAS SIMPLES ''
SELECT NOME || ' NASCEU EM ' || CIDADE AS "NASCIMENTO DO ALUNO"
FROM TALUNO;


-- NA PRÁTICA:

-- ALIAS COM "" FORÇA AS LETRAS A FICAREM CAIXA BAIXA
SELECT COD_ALUNO AS "CODIGO", NOME AS "NOME DO ALUNO"
FROM TALUNO;


-- DISTINCT ANALISA A LINHA INTEIRA, NÃO APENAS "CÉLULAS"
SELECT DISTINCT CIDADE, COD_ALUNO
FROM TALUNO
-- ORDENA A COLUNA QUE IRÁ SER VISUALIZADA PRIMEIRO NA LISTAGEM
ORDER BY CIDADE;

SELECT * FROM TCURSO

ALTER TABLE TCURSO RENAME COLUMN CARGA_HORARIO TO CARGA_HORARIA;

SELECT NOME AS CURSO,
       VALOR,
       -- DIVISÃO P/ SABER VALOR DA HORA
       VALOR/CARGA_HORARIA,
       -- ARREDONDAR PARA DUAS CASAS DECIMAIS
       ROUND(VALOR/CARGA_HORARIA,2) AS VALOR_HORA
FROM TCURSO
-- ALIAS SÓ FUNCIONA EM ORDER BY
ORDER BY VALOR_HORA -- RESTRINGINDO E LIMITANDO DADOS

SELECT [DISTINCT] {*, COLUMN [ALIAS], ...}
FROM NAME_TABLE
[WHERE CONDITION(S)];

/*
  NA SINTAXE:
  WHERE RESTRINGE A CONSULTA PARA AS LINHAS
        QUE SATISFAZEM A CONDIÇÃO
  CONDITION É COMPOSTA DE NOMES DE COLUNAS, EXPRESSÕES,
        CONSTANTES, E OPERADORES DE COMPARAÇÃO
*/


-- STRINGS DE CARACTERE E DATA SÃO INCLUSOS ENTRE ASPAS SIMPLES
-- VALORES CARACTERE FAZEM DISTINÇÃO ENTRE MAIÚSCULAS E MINÚSCULAS,
--  E VALORES TIPO DATA SÃO SENSÍVEIS AO FORMATO
SELECT COD_ALUNO, NOME
FROM TALUNO
WHERE ESTADO = 'RS';

SELECT * FROM TCONTRATO


/*
  OPERADORES:

  = IGUAL A
  > MAIOR QUE
  >= MAIOR QUE OU IGUAL A
  < MENOR QUE
  <= MENOR QUE OU IGUAL A
  <> OU != DIFERENTE DE

  WHERE EXPR OPERATOR VALUE
*/

-- UTILIZANDO OS OPERADORES DE COMPARAÇÃO:
SELECT COD_CONTRATO, DATA, TOTAL, DESCONTO + 10
FROM TCONTRATO
WHERE TOTAL <= DESCONTO + 10;

/*
  OUTROS OPERADORES DE COMPARAÇÃO:
  BETWEEN...AND... ENTRE DOIS VALORES (INCLUSIVE)
  IN(LIST) IGUAL A UM DOS VALORES DA LISTA
  LIKE IGUAL A UM PADRÃO DE CARACTERES
  IS NULL POSSUI UM VALOR NULO
  IS NOT NULL NÃO POSSUI UM VALOR NULO
*/


SELECT * FROM TALUNO;

-- ALTER TABLE

-- SE EXECUTAR O COMANDO SEM A RESTRIÇÃO WHERE, IRÁ AFETAR TODAS AS LINHAS
-- DEFAULT = VALOR PADRÃO NA COLUNA
ALTER TABLE TALUNO ADD ESTADO CHAR(2) DEFAULT 'RS';
ALTER TABLE TALUNO ADD SALARIO NUMBER(8,2) DEFAULT 620;

UPDATE TALUNO SET
ESTADO = 'AC',
SALARIO = 250
WHERE COD_ALUNO = 1;

UPDATE TALUNO SET
ESTADO = 'MT',
SALARIO = 2000
WHERE COD_ALUNO = 2;

UPDATE TALUNO SET
ESTADO = 'SP',
SALARIO = 800
WHERE COD_ALUNO = 4;

COMMIT;

SELECT * FROM TALUNO;

SELECT * FROM TALUNO
WHERE ESTADO <> 'RS'
AND SALARIO <= 800
-- ORDENAR DECRESCENTEMENTE
ORDER BY SALARIO DESC;

-- INSERIR SEM PASSAR AS COLUNAS CEP, ESTADO E SALARIO,
--  ONDE ESTADO E SALARIO FORAM ALTERADAS PARA VALORES PADRÃO DEFAULT
INSERT INTO TALUNO (COD_ALUNO, NOME, CIDADE)
VALUES (SEQ_ALUNO.NEXTVAL, 'VALDO', 'DOIS IRMAOS');

INSERT INTO TALUNO (COD_ALUNO, NOME, CIDADE)
VALUES (SEQ_ALUNO.NEXTVAL, 'ALDO', 'QUATRO IRMAOS');

SELECT * FROM TALUNO;

UPDATE TALUNO SET
ESTADO = 'SP',
SALARIO = 900,
NOME = 'JONATAN'
WHERE COD_ALUNO = 7

-- QUANDO UTILIZAR O ORDER BY COM MAIS DE UMA COLUNA,
--  VAI OBEDECER O CRITÉRIO DE GRUPO DA PRIMEIRA COLUNA,
--   ORDENANDO A PRÓXIMA COLUNA A PARTIR DA COLUNA ANTERIOR
SELECT ESTADO, SALARIO, NOME
FROM TALUNO
ORDER BY ESTADO, SALARIO DESC;


-- 31/12/1899 - DATA ZERO
-- 01/01/1990 - DATA 1

-- DATA DE HOJE - 1000 DIAS COMO PADRÃO NA COLUNA
ALTER TABLE TALUNO ADD NASCIMENTO DATE DEFAULT SYSDATE - 1000;

ALTER TABLE TALUNO
DROP COLUMN NASCIMENTO

SELECT * FROM TALUNO;

-- CÁLCULO COM A DATA DO SERVIDOR
SELECT SYSDATE - SYSDATE - 100 FROM DUAL;

UPDATE TALUNO SET
NASCIMENTO = '10/08/2000'
WHERE COD_ALUNO = 2

UPDATE TALUNO SET
NASCIMENTO = '10/10/2001'
WHERE COD_ALUNO = 1

--  ALTERAR O PADRÃO DE MÁSCARA DE DATA DA SUA SESSÃO
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI';

-- TRUNC: TRUNCAMENTO(CORTE) DE NÚMEROS P/ QTD DE CASAS DETERMINADAS
SELECT COD_ALUNO, TRUNC(NASCIMENTO) NASCIMENTO, NOME
FROM TALUNO
WHERE TRUNC(NASCIMENTO) = '23/10/2020';

SELECT COD_ALUNO, TRUNC(NASCIMENTO) AS NASCIMENTO, NOME
FROM TALUNO
WHERE NASCIMENTO
  -- BETWEEN: FILTRAR DENTRO DE UM PERÍODO
  -- TO_DATE: CONVERTER PARA DATA
  -- 'DD/MM/YYYY HH24:MI': FORMATO DE MÁSCARA DE DIA, MÊS, ANO, HORA E MINUTOS
    -- HH24: FORMATO DE 24H (AM/PM)
  BETWEEN TO_DATE('23/10/2020 00:01', 'DD/MM/YYYY HH24:MI')
    AND TO_DATE('23/10/2020 12:00', 'DD/MM/YYYY HH24:MI')

SELECT * FROM TALUNO;


SELECT COD_CONTRATO, DATA, TOTAL, DESCONTO,
       -- CÁLCULO DE SOMA
       DESCONTO + 1000 AS CALCULO
FROM TCONTRATO
-- CONDIÇÃO: TOTAL FOR MENOR OU IGUAL A DESCONTO + 1000, POR EX., 10 + 1000
WHERE TOTAL <= DESCONTO + 1000;

SELECT * FROM TCONTRATO

UPDATE TCONTRATO SET
DESCONTO = NULL
WHERE COD_CONTRATO = 2;

SELECT * FROM TCONTRATO
-- ONDE O DESCONTO FOR NULO
WHERE DESCONTO IS NULL;

SELECT * FROM TCONTRATO
-- ONDE O DESCONTO NÃO FOR NULO
WHERE DESCONTO IS NOT NULL;

SELECT * FROM TCONTRATO
-- ONDE O DESCONTO FOR ENTRE 0 E 10
WHERE DESCONTO BETWEEN 0 AND 10;

-- NVL 0> COLUNAR COM VALOR NULL -> SUBSTITUI O NULL POR 0
-- BETWEEN = ENTRE
SELECT COD_CONTRATO, TOTAL, DESCONTO, NVL(DESCONTO, 0)
FROM TCONTRATO
WHERE NVL(DESCONTO, 0) BETWEEN 0 AND 10;

-- MESMO EFEITO DO BETWEEN
SELECT * FROM TCONTRATO
WHERE DESCONTO >= 0
AND DESCONTO <= 10
OR DESCONTO IS NULL;


-- IN /// NOT IN
-- VALOR NA(EM) LISTAGEM
SELECT * FROM TITEM
WHERE COD_CURSO IN (1, 2, 4);

-- VALOR NÃO ESTÁ(EM) NA LISTAGEM
SELECT * FROM TITEM
WHERE COD_CURSO NOT IN (1, 2, 3);


SELECT * FROM TCURSO

INSERT INTO TCURSO VALUES (5, 'WINDOWS 11', 1000, 50);

-- CURSOS NÃO VENDIDOS
SELECT * FROM TCURSO
-- SUBSELECT/SUBQUERY
WHERE COD_CURSO NOT IN (SELECT COD_CURSO FROM TITEM)

-- CURSOS VENDIDOS
SELECT * FROM TCURSO
WHERE COD_CURSO IN (SELECT COD_CURSO FROM TITEM)

-- EQUIVALENTE AO SELECT IN
SELECT * FROM TITEM
WHERE COD_CURSO = 1
OR COD_CURSO = 2
OR COD_CURSO = 4;

-- REGISTROS QUE INICIAM COM M
SELECT * FROM TALUNO WHERE NOME LIKE 'M%'

-- REGISTROS QUE CONTENHAM A PALAVRA "JAVA"
SELECT * FROM TCURSO WHERE NOME LIKE '%JAVA%'

-- REGISTROS QUE TERMINAM COM A PALAVRA "FACES"
SELECT * FROM TCURSO WHERE NOME LIKE '%FACES'

-- SOMENTE ONDE A SEGUNDA LETRA SEJA A
SELECT * FROM TCURSO WHERE NOME LIKE '_A%'

COMMIT;


ALTER TABLE TCURSO ADD PRE_REQ INTEGER;

UPDATE TCURSO SET
PRE_REQ = 1
WHERE COD_CURSO = 2;

UPDATE TCURSO SET
PRE_REQ = 3
WHERE COD_CURSO = 4;

SELECT * FROM TCURSO

-- CURSOS SEM PRE-REQUISITOS
SELECT * FROM TCURSO WHERE PRE_REQ IS NULL

-- CURSOS COM PRE-REQUISITOS
SELECT * FROM TCURSO WHERE PRE_REQ IS NOT NULL


-- PRECEDÊNCIA DE OPERADORES
-- ()
-- AND
-- OR

--INCORRETO
SELECT * FROM TCURSO
WHERE VALOR > 750
OR VALOR < 1000
AND CARGA_HORARIA = 25;

-- CORRETO
SELECT * FROM TCURSO
WHERE (VALOR > 750
OR VALOR < 1000)
AND CARGA_HORARIA = 25;


ROLLBACK;




